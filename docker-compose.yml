# Docker Compose 파일 버전
version: '3.8'

# 실행할 서비스(컨테이너)들의 네트워크를 정의합니다.
networks:
  ticketing-network:

# 실행할 서비스(컨테이너)들의 목록
services:
  # 1. 인프라 서비스 (Infrastructure Services)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    networks:
      - ticketing-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    networks:
      - ticketing-network
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  ticketing-postgres:
    image: postgres
    container_name: ticketing-postgres
    networks:
      - ticketing-network
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ticketing-poc-db
      POSTGRES_USER: sanghyeop
      POSTGRES_PASSWORD: star15321!

  user-service-postgres:
    image: postgres
    container_name: user-service-postgres
    networks:
      - ticketing-network
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: user-service-db
      POSTGRES_USER: sanghyeop
      POSTGRES_PASSWORD: star15321!

  product-service-postgres:
    image: postgres
    container_name: product-service-postgres
    networks:
      - ticketing-network
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: product-service-db
      POSTGRES_USER: sanghyeop
      POSTGRES_PASSWORD: star15321!

  seat-management-redis:
    image: redis
    container_name: seat-management-redis
    networks:
      - ticketing-network
    ports:
      - "6379:6379"

  user-service-redis:
    image: redis
    container_name: user-service-redis
    networks:
      - ticketing-network
    ports:
      - "6380:6379"


  # 2. 애플리케이션 서비스 (Application Services)
  user-service:
    image: ticketing/user-service:1.0 # 우리가 빌드한 이미지 사용
    container_name: user-service
    networks:
      - ticketing-network
    ports:
      - "8081:8081"
    depends_on: # user-service-postgres가 실행된 후에 시작
      - user-service-postgres
      - user-service-redis
    environment: # 환경변수를 통해 DB 접속 정보 주입
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-service-postgres:5432/user-service-db
      - SPRING_DATASOURCE_USERNAME=sanghyeop
      - SPRING_DATASOURCE_PASSWORD=star15321!
      - SPRING_DATA_REDIS_HOST=user-service-redis
      - SPRING_DATA_REDIS_PORT=6379

  product-service:
    image: ticketing/product-service:1.0
    container_name: product-service
    networks:
      - ticketing-network
    ports:
      - "8082:8082"
    depends_on:
      - product-service-postgres
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://product-service-postgres:5432/product-service-db
      - SPRING_DATASOURCE_USERNAME=sanghyeop
      - SPRING_DATASOURCE_PASSWORD=star15321!

  seat-management-service:
    image: ticketing/seat-management-service:1.0
    container_name: seat-management-service
    networks:
      - ticketing-network
    ports:
      - "8083:8083"
    depends_on:
      - seat-management-redis
      - kafka
    environment:
      - SPRING_DATA_REDIS_HOST=seat-management-redis
      - SPRING_DATA_REDIS_PORT=6379
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092

  order-service: # ticketing-poc 프로젝트
    image: ticketing/order-service:1.0
    container_name: order-service
    networks:
      - ticketing-network
    ports:
      - "8080:8080"
    depends_on:
      - ticketing-postgres
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ticketing-postgres:5432/ticketing-poc-db
      - SPRING_DATASOURCE_USERNAME=sanghyeop
      - SPRING_DATASOURCE_PASSWORD=star15321!
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092

  payment-service:
    image: ticketing/payment-service:1.0
    container_name: payment-service
    networks:
      - ticketing-network
    ports:
      - "8084:8084"
    depends_on:
      - kafka
    environment:
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=kafka:9092

  api-gateway:
    image: ticketing/api-gateway:1.0
    container_name: api-gateway
    networks:
      - ticketing-network
    ports:
      - "8000:8000"
    depends_on: # 모든 서비스가 준비된 후 마지막에 실행
      - user-service
      - product-service
      - order-service
    environment: # 게이트웨이의 라우팅 규칙도 환경변수로 주입
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_0_ID=user-service-route
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_0_URI=http://user-service:8081
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_0_PREDICATES_0=Path=/api/users/**
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_1_ID=product-service-route
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_1_URI=http://product-service:8082
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_1_PREDICATES_0=Path=/api/products/**
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_2_ID=order-service-route
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_2_URI=http://order-service:8080
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_2_PREDICATES_0=Path=/api/orders/**
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_3_ID=seat-service-route
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_3_URI=http://seat-management-service:8083
      - SPRING_CLOUD_GATEWAY_SERVER_WEBFLUX_ROUTES_3_PREDICATES_0=Path=/api/seats/**
